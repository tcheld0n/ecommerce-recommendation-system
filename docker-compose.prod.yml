services:
  # Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: bookstore
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d bookstore"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # API Gateway
  api-gateway:
    build: ./services/api-gateway
    ports:
      - "8000:8000"
    environment:
      - CATALOG_SERVICE_URL=http://catalog-service:8001
      - AUTH_SERVICE_URL=http://auth-service:8002
      - USERS_SERVICE_URL=http://users-service:8003
      - CART_SERVICE_URL=http://cart-service:8004
      - ORDERS_SERVICE_URL=http://orders-service:8005
      - PAYMENT_SERVICE_URL=http://payment-service:8006
      - RECOMMENDATION_SERVICE_URL=http://recommendation-service:8007
    depends_on:
      - catalog-service
      - auth-service
      - users-service
      - cart-service
      - orders-service
      - payment-service
      - recommendation-service
    volumes:
      - ./uploads:/app/uploads
    networks:
      - backend
      - frontend

  # Catalog Service
  catalog-service:
    build: ./services/catalog-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Auth Service
  auth-service:
    build: ./services/auth-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Users Service
  users-service:
    build: ./services/users-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Cart Service
  cart-service:
    build: ./services/cart-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - REDIS_URL=redis://redis:6379/0
      - CATALOG_SERVICE_URL=http://catalog-service:8001
      - AUTH_SERVICE_URL=http://auth-service:8002
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Orders Service
  orders-service:
    build: ./services/orders-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - CART_SERVICE_URL=http://cart-service:8004
      - CATALOG_SERVICE_URL=http://catalog-service:8001
      - AUTH_SERVICE_URL=http://auth-service:8002
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Payment Service
  payment-service:
    build: ./services/payment-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - AUTH_SERVICE_URL=http://auth-service:8002
      - ORDERS_SERVICE_URL=http://orders-service:8005
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
    networks:
      - backend

  # Recommendation Service
  recommendation-service:
    build: ./services/recommendation-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - REDIS_URL=redis://redis:6379/0
      - AUTH_SERVICE_URL=http://auth-service:8002
      - CATALOG_SERVICE_URL=http://catalog-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
      - ./ml:/app/ml
    networks:
      - backend

  # Celery Worker
  celery:
    build: ./services/recommendation-service
    command: celery -A tasks.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
      - ./ml:/app/ml
      - ./tasks:/app/tasks
    networks:
      - backend

  # Celery Beat
  celery-beat:
    build: ./services/recommendation-service
    command: celery -A tasks.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/bookstore
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./core:/app/core
      - ./models:/app/models
      - ./schemas:/app/schemas
      - ./services:/app/services
      - ./ml:/app/ml
      - ./tasks:/app/tasks
    networks:
      - backend

  # Nginx (Load Balancer)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  frontend:
  backend:
